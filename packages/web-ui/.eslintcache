[{"C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\index.tsx":"1","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\reportWebVitals.ts":"2","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\App.tsx":"3","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Login\\index.tsx":"4","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\index.tsx":"5","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Homescreen\\index.tsx":"6","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\actions\\auth.ts":"7","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\type-map.tsx":"8","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\TypeEditor\\index.tsx":"9","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Settings\\index.tsx":"10","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Workflows\\index.tsx":"11","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\PageEditor\\index.tsx":"12","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\components\\sidebar\\index.tsx":"13","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\calendar.tsx":"14","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\equipment.tsx":"15","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\project.tsx":"16","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\contacts.tsx":"17","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\knowledgebase.tsx":"18","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\team.tsx":"19","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\file.tsx":"20","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\admin.tsx":"21","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\home.tsx":"22","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Settings\\settings-map.tsx":"23","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\components\\layout\\index.tsx":"24","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\components\\menu-view\\index.tsx":"25","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\components\\layout-editor\\index.tsx":"26","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\components\\layout-editor\\data-modal.tsx":"27","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\components\\layout-editor\\editor-modal.tsx":"28","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Admin\\index.tsx":"29","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Admin\\editor.tsx":"30","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Admin\\nodes\\type-def.tsx":"31","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Admin\\nodes\\ext-adapter.tsx":"32","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Admin\\nodes\\ext-store.tsx":"33"},{"size":715,"mtime":1612238409167,"results":"34","hashOfConfig":"35"},{"size":440,"mtime":1612238409169,"results":"36","hashOfConfig":"35"},{"size":1562,"mtime":1612238526033,"results":"37","hashOfConfig":"35"},{"size":2126,"mtime":1612238409184,"results":"38","hashOfConfig":"35"},{"size":2054,"mtime":1612238409176,"results":"39","hashOfConfig":"35"},{"size":3761,"mtime":1612503151507,"results":"40","hashOfConfig":"35"},{"size":399,"mtime":1612238409159,"results":"41","hashOfConfig":"35"},{"size":1302,"mtime":1612238409177,"results":"42","hashOfConfig":"35"},{"size":3607,"mtime":1612238409189,"results":"43","hashOfConfig":"35"},{"size":1371,"mtime":1612238409187,"results":"44","hashOfConfig":"35"},{"size":3697,"mtime":1612238409190,"results":"45","hashOfConfig":"35"},{"size":1875,"mtime":1612238409185,"results":"46","hashOfConfig":"35"},{"size":3468,"mtime":1612238409166,"results":"47","hashOfConfig":"35"},{"size":4175,"mtime":1612238409178,"results":"48","hashOfConfig":"35"},{"size":4347,"mtime":1612238409180,"results":"49","hashOfConfig":"35"},{"size":5812,"mtime":1612238409182,"results":"50","hashOfConfig":"35"},{"size":4036,"mtime":1612238409179,"results":"51","hashOfConfig":"35"},{"size":2402,"mtime":1612238409181,"results":"52","hashOfConfig":"35"},{"size":4235,"mtime":1612238409183,"results":"53","hashOfConfig":"35"},{"size":1079,"mtime":1612238409180,"results":"54","hashOfConfig":"35"},{"size":564,"mtime":1612238409178,"results":"55","hashOfConfig":"35"},{"size":1226,"mtime":1612238409181,"results":"56","hashOfConfig":"35"},{"size":3581,"mtime":1612238409187,"results":"57","hashOfConfig":"35"},{"size":9018,"mtime":1612238409163,"results":"58","hashOfConfig":"35"},{"size":1338,"mtime":1612238409164,"results":"59","hashOfConfig":"35"},{"size":3929,"mtime":1612238409162,"results":"60","hashOfConfig":"35"},{"size":2824,"mtime":1612238409160,"results":"61","hashOfConfig":"35"},{"size":2380,"mtime":1612238409161,"results":"62","hashOfConfig":"35"},{"size":3802,"mtime":1612238409173,"results":"63","hashOfConfig":"35"},{"size":1420,"mtime":1612238409171,"results":"64","hashOfConfig":"35"},{"size":644,"mtime":1612238409175,"results":"65","hashOfConfig":"35"},{"size":4921,"mtime":1612238409174,"results":"66","hashOfConfig":"35"},{"size":479,"mtime":1612238409174,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1tzp6ac",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"70"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"70"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"70"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"70"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"70"},"C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\index.tsx",[],["156","157"],"C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\reportWebVitals.ts",[],"C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\App.tsx",["158","159","160"],"import React from 'react';\r\nimport isElectron from 'is-electron'\r\nimport { HashRouter, BrowserRouter, Route, Redirect } from 'react-router-dom'\r\nimport { WorkhubClient } from '@workerhive/client'\r\nimport { WorkhubProvider } from '@workerhive/client/dist/react'\r\nimport {Login} from './views/Login';\r\n\r\n//homescreen test\r\nimport {Homescreen} from './views/Homescreen';\r\n\r\nimport './App.css';\r\nimport { Dashboard } from './views/Dashboard';\r\n\r\nlet Router : any;\r\n\r\nif(isElectron()){\r\n  Router = HashRouter\r\n}else{\r\n  Router = BrowserRouter\r\n}\r\n\r\nfunction App() {\r\n\r\n  const [ hubUrl, setHubUrl ] = React.useState<string | null>(isElectron() ? localStorage.getItem('workhub-api') : (process.env.NODE_ENV == \"development\" ? 'http://localhost:4002' : window.location.origin));\r\n  return (\r\n        <Router>\r\n          <div className=\"App\">\r\n            <Route path=\"/homescreen\" component={Homescreen} />\r\n            <Route path=\"/login\" component={Login} />\r\n            <Route path=\"/dashboard\" render={(props) => {\r\n              if(localStorage.getItem('token') && localStorage.getItem('token')!.length > 0){\r\n                return (\r\n                      <WorkhubProvider token={localStorage.getItem('token')!} url={hubUrl || ''}>\r\n                        <Dashboard {...props} />\r\n                      </WorkhubProvider>\r\n                )\r\n              }else{\r\n                return (\r\n                  <Redirect to=\"/login\" />\r\n                )\r\n              }\r\n            }} />\r\n          </div>\r\n        </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Login\\index.tsx",[],"C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\index.tsx",["161","162","163","164","165"],"import { useHub } from '@workerhive/client/dist/react';\r\nimport { MuiPickersUtilsProvider} from '@material-ui/pickers'\r\nimport MomentUtils from '@date-io/moment';\r\n\r\nimport React, { Suspense, lazy } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport Sidebar from '../../components/sidebar'\r\nimport { AdminView } from '../Admin';\r\nimport { PageEditor } from '../PageEditor';\r\nimport { TypeEditor } from '../TypeEditor';\r\nimport { setChonkyDefaults } from 'chonky';\r\nimport { ChonkyIconFA } from 'chonky-icon-fontawesome';\r\n\r\nimport './index.css';\r\n\r\nsetChonkyDefaults({ iconComponent: ChonkyIconFA });\r\n\r\nconst TypeMap = lazy(() => import('./type-map'))\r\nconst Settings = lazy(() => import('../Settings')) \r\nconst Workflows = lazy(() => import('../Workflows'))\r\n\r\nexport interface DashboardProps{\r\n    match: any;\r\n}\r\n\r\nconst Fallback = (props : any) => {\r\n    return (<div>Loading {props.reason} ...</div>)\r\n}\r\n\r\nexport const Dashboard: React.FC<DashboardProps> = (props) => {\r\n    const [ hub, store, isReady, err ] = useHub()\r\n    console.log(hub && Object.keys(hub!.actions).length)\r\n    return (\r\n        <div className=\"dashboard-view\">\r\n            <Sidebar />\r\n            {hub != null && isReady ?(\r\n                <Suspense fallback={<Fallback reason=\"Components\"/>}>\r\n                <div className=\"dashboard-body\">\r\n                    <Switch>\r\n                        <Route path={`${props.match.url}/workflows`} exact component={Workflows} />\r\n                        <Route path={`${props.match.url}/settings`} exact component={Settings} />\r\n                        <Route path={`${props.match.url}/settings/type-editor/:type`} exact component={TypeEditor} />\r\n                        <Route path={`${props.match.url}/settings/type-editor/:type/pages/:page_id`} component={PageEditor} />\r\n                        <TypeMap />\r\n\r\n                    </Switch>\r\n                </div>\r\n                </Suspense>\r\n            ) : <Fallback reason={`Client ${isReady} ${hub}`} />}\r\n\r\n        </div>        \r\n    )\r\n}","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Homescreen\\index.tsx",["166","167"],"C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\actions\\auth.ts",[],"C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\type-map.tsx",["168","169","170","171","172","173","174","175","176","177","178","179","180"],"import React, { FC, ReactElement } from 'react';\r\nimport { Calendar, DocumentEditor, FileBrowser, Header, MutableDialog, PermissionForm, SearchTable } from '@workerhive/react-ui'\r\nimport { Route } from 'react-router-dom';\r\nimport { Layout } from '../../components/layout';\r\nimport { Paper, Fab } from '@material-ui/core';\r\nimport { Add } from '@material-ui/icons';\r\n\r\nimport { CALENDAR_VIEW } from './types/calendar'\r\nimport { PROJECT_DRILLDOWN, PROJECT_VIEW } from './types/project';\r\nimport { EQUIPMENT_VIEW } from './types/equipment';\r\nimport { FILE_VIEW } from './types/file';\r\nimport { CONTACT_VIEW } from './types/contacts';\r\nimport { KNOWLEDGE_VIEW } from './types/knowledgebase';\r\nimport { TEAM_VIEW } from './types/team';\r\nimport { HOME_VIEW } from './types/home';\r\nimport { ADMIN_VIEW } from './types/admin';\r\nconst Types = [\r\n    ADMIN_VIEW,\r\n    HOME_VIEW,\r\n   CALENDAR_VIEW,\r\n    PROJECT_VIEW,\r\n    PROJECT_DRILLDOWN,\r\n    EQUIPMENT_VIEW,\r\n    FILE_VIEW,\r\n    CONTACT_VIEW,\r\n    KNOWLEDGE_VIEW,\r\n    TEAM_VIEW\r\n]\r\n\r\nexport default (props: any) => {\r\n    return (\r\n        <>\r\n            {Types.map((x) => (\r\n                <Route path={x.path} exact render={(props) => (\r\n                    <Layout {...props} schema={x} />\r\n                )} />\r\n            ))}\r\n        </>\r\n    )\r\n}","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\TypeEditor\\index.tsx",["181","182","183","184"],"import { IconButton, List, ListItem, Paper, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { CRUDKV, Header } from \"@workerhive/react-ui\"\r\nimport './index.css';\r\nimport { Add, ArrowBack } from '@material-ui/icons';\r\nimport { useHub } from '@workerhive/client/dist/react';\r\n\r\nexport interface TypeEditorProps{\r\n    match: any;\r\n    history: any;\r\n}\r\n\r\nexport const TypeEditor : React.FC<TypeEditorProps> = (props) => {\r\n    const [ type, setType ] = React.useState<any>({def: [{name: 'ID', type: 'ID'}]})\r\n\r\n    const [ client, isReady, err ] = useHub();\r\n\r\n    const editPage = (page : string) => {\r\n        props.history.push(`${props.match.url}/pages/${page}`)\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if(isReady && client){\r\n            let type = client.models!.filter((a) => a.name === props.match.params.type)[0]\r\n            setType({def: type.def, name: type.name})\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"type-editor\">\r\n            <Header title={props.match.params.type}/>\r\n            <div className=\"type-editor__body\">\r\n                <div className=\"type-editor__details\">\r\n                    {/*<div style={{display: 'flex', alignItems: 'center'}}>\r\n                        <IconButton onClick={() => props.history.push(`/dashboard/settings`)}><ArrowBack /></IconButton><Typography variant=\"h6\">{props.match.params.type} </Typography>\r\n                    </div>*/}\r\n                    \r\n                    <Paper className=\"type-editor__types\">\r\n                        <CRUDKV types={client!.models || []} value={type.def} onChange={({value} : any) => {\r\n\r\n                          let fields = value.filter((a : {type: string, name: string}) => a.type.length > 0)\r\n                          let newFields = fields.filter((a: any) => {\r\n                            return type.def.map((x: any) => `${x.name}:${x.type}`).indexOf(`${a.name}:${a.type}`) < 0\r\n                          })\r\n\r\n                          if(newFields.length > 0){\r\n                              client!.actions.updateType(type.name, newFields)\r\n                            /*client!.actions.updateType(type.name, value.filter((a : any) => {\r\n                                return a.name && a.name.length > 0 && a.type && a.type.length > 0\r\n                            }).filter((a: any) => {\r\n                                return type.def.map((x: any) => x.name + \":\"+JSON.stringify(x.def)).indexOf(`${a.name}:${JSON.stringify(a.def)}`)\r\n                            }))*/\r\n                            }\r\n                            setType({name: type.name, def: value});\r\n\r\n                        }} />\r\n                    </Paper>\r\n\r\n                    <Paper className=\"type-editor__views\">\r\n                        <Typography variant=\"subtitle1\">Views</Typography>\r\n                        <List>\r\n                            <ListItem button onClick={() => editPage('default')}>{props.match.params.type} Home</ListItem>\r\n                            <ListItem button style={{display: 'flex', justifyContent: 'center'}}><Add /> Create new page</ListItem>\r\n                        </List>\r\n                    </Paper>\r\n                </div>\r\n                <Paper className=\"type-editor__integrations\">\r\n                    <Typography variant=\"subtitle1\">Integrations</Typography>\r\n                    <List>\r\n                        <ListItem button style={{display: 'flex', justifyContent: 'center'}}><Add /> Add Integration</ListItem>\r\n                    </List>\r\n                </Paper>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Settings\\index.tsx",["185","186","187","188"],"import React from 'react';\r\n\r\nimport { AccordionList } from \"@workerhive/react-ui\"\r\nimport { SettingsMap } from './settings-map'\r\nimport './index.css';\r\nimport { useHub } from '@workerhive/client/dist/react';\r\n\r\nexport interface SettingsProps{\r\n    history: any;\r\n}\r\n\r\nexport default function Settings (props: SettingsProps){\r\n  const [ converters, setConverters ] = React.useState([])\r\n  const [ stores, setStores ] = React.useState([])\r\n\r\n  const [ client, store, isReady ] = useHub();\r\n\r\n  React.useEffect(() => {\r\n    client!.actions.getStoreTypes().then((data : any) => {\r\n      setStoreTypes(data)\r\n    })\r\n\r\n    client!.actions.getIntegrationStores().then((data : any) => {\r\n      setStores(data)\r\n    })\r\n\r\n   /* getStoreTypes().then((types : any) => {\r\n      console.log(\"TYOES\", types)\r\n      setStoreTypes(types);\r\n    })\r\n\r\n    props.getStores();\r\n */\r\n\r\n    /*getConverters().then((converters) => {\r\n      console.log(converters)\r\n      setConverters(converters)\r\n    })*/\r\n  }, [])\r\n\r\n  const roles = [\r\n    {\r\n      name: \"Admin\"\r\n    },\r\n    {\r\n      name: \"Editor\"\r\n    },\r\n    {\r\n      name: \"User\"\r\n    }\r\n  ]\r\n\r\n  const [ storeTypes, setStoreTypes ] = React.useState([]);\r\n\r\n    return (\r\n        <div className=\"settings-view\">\r\n            <AccordionList items={SettingsMap(props, stores, storeTypes, converters, roles)} />\r\n        </div>\r\n    )\r\n}","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Workflows\\index.tsx",["189"],"import React from 'react';\r\n\r\nimport { Editor, HiveProvider, NodePanel } from \"@workerhive/hive-flow\"\r\nimport { Header } from '@workerhive/react-ui'\r\nimport '@workerhive/hive-flow/dist/index.css'\r\nimport './index.css';\r\nimport { MenuView } from '../../components/menu-view';\r\n\r\nimport { useHub } from '@workerhive/client/dist/react'\r\n\r\nexport interface WorkflowsProps{\r\n\r\n}\r\n\r\nexport default function Workflows(props: React.FC<WorkflowsProps>){\r\n\r\n    const [ client, err ] = useHub()\r\n\r\n    const [ nodes, setNodes ] = React.useState<Array<any>>([])\r\n    const [ links, setLinks ] = React.useState<Array<any>>([])\r\n    const [ workflow, setWorkflow ] = React.useState<any>({})\r\n    const [ workflows, setWorkflows ] = React.useState<Array<any>>([]);\r\n\r\n    React.useEffect(() => {\r\n        console.log(client!.actions)\r\n        client!.actions.getWorkflows().then((workflows : any) => {\r\n            setWorkflows(workflows)\r\n        })\r\n   \r\n    }, [client])\r\n\r\n    const _onNodeAdd = (node: any) => {\r\n        updateNodes(nodes.concat([node]))\r\n    }  \r\n\r\n    const _onLinkAdd = (link: any) => {\r\n        updateLinks(links.concat([link]))\r\n    }\r\n\r\n    const updateLinks = (links : any) => {\r\n        setLinks(links)\r\n        if(workflow.id) client!.actions.updateWorkflow(workflow.id, {links: links})\r\n    }\r\n\r\n    const updateNodes = (nodes : any) => {\r\n        setNodes(nodes)\r\n        console.log(workflow)\r\n        if(workflow.id) client!.actions.updateWorkflow(workflow.id, {nodes: nodes})\r\n    }\r\n\r\n    return (\r\n        <div className=\"workflows-view\">\r\n            <Header tabs={[]} title=\"Workflows\" />\r\n            <MenuView \r\n                title={\"Workflows\"}\r\n                structure={{name: 'String'}}\r\n                onClick={({item }: any) => {\r\n                    client!.actions.getWorkflow(item.id).then((workflow : any) => {\r\n                        console.log(workflow)\r\n                        setWorkflow(workflow)\r\n                        setNodes(workflow.nodes || [])\r\n                        setLinks(workflow.links || [])\r\n                    })\r\n                }}\r\n                onSave={({item}:any) => {\r\n                    client!.actions.addWorkflow(item).then((r : any) => {\r\n                      \r\n                        alert(\"Saved\")\r\n                    })\r\n                    console.log(item)\r\n                }}\r\n                items={workflows}>\r\n            <HiveProvider \r\n            store={{\r\n                direction: 'horizontal',\r\n                nodes: nodes,\r\n                links: links,\r\n                onNodeAdd: _onNodeAdd,\r\n                onLinkAdd: _onLinkAdd,\r\n                onNodeUpdate: (id: any, node: any) => {\r\n                    let n = nodes.slice()\r\n                    let ix = n.map((x: any) => x.id).indexOf(id);\r\n                    n[ix] = {\r\n                        ...n[ix],\r\n                        ...node\r\n                    }\r\n                    updateNodes(n)\r\n                },\r\n                onNodeRemove: (node: any) => {\r\n                    let n = nodes.slice().filter((a: any) => node.map((x: any) => x.id).indexOf(a.id) < 0);\r\n                    updateNodes(n)\r\n                    console.log(node)\r\n                },\r\n                onLinkRemove: (link: any) => {\r\n                    let l = links.slice().filter((a: any) => link.map((x: any) => x.id).indexOf(a.id) < 0);\r\n                    updateLinks(l);\r\n                },\r\n                statusColors: {\r\n                    'undefined': 'gray'\r\n                }\r\n            }}>\r\n                <Editor />\r\n                <NodePanel />\r\n            </HiveProvider>\r\n            </MenuView>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\PageEditor\\index.tsx",["190","191","192","193","194"],"import { useHub } from '@workerhive/client/dist/react';\r\nimport React from 'react';\r\nimport { LayoutEditor } from '../../components/layout-editor';\r\nimport * as Components from '@workerhive/react-ui'\r\nimport { identity, isNil, omitBy, pickBy } from 'lodash';\r\nimport './index.css';\r\nconst WorkUI : any = {...Components}\r\n\r\nexport interface PageEditorProps {\r\n    match: any;\r\n}\r\n\r\nexport const PageEditor : React.FC<PageEditorProps> = (props) => {\r\n\r\n    const pageName = `${props.match.params.type}-${props.match.params.page_id}`\r\n\r\n    const [ hub, isReady, err ] = useHub();\r\n    \r\n    const [ loaded, setLoaded ] = React.useState<boolean>(false);\r\n    const [ layout, setLayout ] = React.useState<any>([])\r\n\r\n    React.useEffect(() => {\r\n        hub!.actions.getPageLayout(pageName).then((result : any) => {\r\n            console.log(result)\r\n            if(result.items && result.items.length > 0){\r\n                let items = result.items;\r\n                setLayout(items.map((x : any) => {\r\n                   let Component = WorkUI[x.component]\r\n                   return omitBy({ \r\n                      ...x,\r\n                      component: <Component />,\r\n                      componentName: x.component\r\n                   }, isNil)\r\n                }))\r\n              //  setLayout(result.items)\r\n            }\r\n            setLoaded(true)\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <LayoutEditor layout={layout} onLayoutChange={(layout: any) => {\r\n            setLayout(layout)\r\n            console.log(\"Sending update\", layout)\r\n            if(loaded){\r\n                hub!.actions.updatePageLayout(pageName, {items: layout.map((x : any) => {\r\n                let ret = { ...x, component: x.componentName }\r\n                delete ret.componentName\r\n                return ret;\r\n                }), data: {}}) \r\n            }\r\n        }}/>\r\n    )\r\n}","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\components\\sidebar\\index.tsx",["195"],"import React from 'react';\r\n\r\nimport {\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    IconButton,\r\n    Divider,\r\n    Paper\r\n} from '@material-ui/core';\r\n\r\nimport {\r\n  Contacts,\r\n    AccountTree,\r\n    Dashboard,\r\n    CalendarToday,\r\n    SupervisorAccount,\r\n    BusinessCenter,\r\n    Description,\r\n    EmojiNature,\r\n    Settings,\r\n    LocalLibrary,\r\n    ChevronLeft,\r\n    ChevronRight\r\n  } from '@material-ui/icons';\r\n\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport './index.css';\r\n\r\nexport interface SidebarProps {\r\n    history: any;\r\n    match: any;\r\n}\r\n\r\nexport function Sidebar(props : SidebarProps){\r\n  const [ minimized, setMinimized ] = React.useState(true);\r\n    const menu = [\r\n        {\r\n          icon: <Dashboard />,\r\n          label: \"Dashboard\",\r\n          path: \"\"\r\n        },\r\n        {\r\n          icon: <CalendarToday />,\r\n          label: \"Calendar\",\r\n          path: \"/calendar\"\r\n        },\r\n        {\r\n          icon: <AccountTree />,\r\n          label: \"Projects\",\r\n          path: \"/projects\"\r\n        },\r\n        {\r\n          icon: <SupervisorAccount />,\r\n          label: \"Team\",\r\n          path: \"/team\"\r\n        },\r\n        {\r\n          icon: <BusinessCenter /> ,\r\n          label: \"Equipment\",\r\n          path: \"/equipment\"\r\n        },\r\n        {\r\n          icon: <Description />,\r\n          label: \"Files\",\r\n          path: \"/files\"\r\n        },\r\n        {\r\n          icon: <LocalLibrary />,\r\n          label: \"Documentation\",\r\n          path: '/kb'\r\n        },\r\n        {\r\n          icon: <Contacts />,\r\n          label: \"Contacts\",\r\n          path: \"/contacts\"\r\n        },\r\n        {\r\n          icon: <EmojiNature />,\r\n          label: \"Workflows\",\r\n          path: '/workflows'\r\n        }\r\n      ]\r\n\r\n    return (\r\n      <Paper className=\"sidebar\" style={{width: minimized ? 64 : 200}} >\r\n        <List style={{flex: 1, maxWidth: minimized ? 64 : 200, transition: 'max-width 200ms ease-in'}}> \r\n        <ListItem style={{position: 'relative', color: 'teal', padding: 12, fontSize: 20, justifyContent: 'flex-start'}}>\r\n           <img src={'/assets/teal.png'} alt=\"Workhub\" style={{height: 33, marginRight: minimized ? 0 : 8, marginLeft: minimized ? 0: 0}} /> \r\n\r\n           {!minimized && <Typography>Workhub</Typography>}\r\n\r\n           <IconButton size=\"small\" style={{backgroundColor: 'green', zIndex: 9, position: 'absolute', right: -12, bottom: -12}} onClick={() => setMinimized(!minimized)}>\r\n              {minimized ? <ChevronRight style={{color: 'rgb(222,222,222)'}}/> : <ChevronLeft style={{color: 'rgb(222,222,222)'}} />}  \r\n           </IconButton>\r\n          \r\n        </ListItem>\r\n        <Divider />\r\n        {menu.map((x, ix) => (\r\n            <ListItem \r\n            className={menu.map((x) => x.path).indexOf(window.location.pathname.split(props.match.url)[1]) == ix ? 'selected menu-item': 'menu-item'}\r\n            onClick={() => props.history.push(`${props.match.url}${x.path}`)}\r\n            button >\r\n              {x.icon} \r\n              {!minimized && x.label}\r\n            </ListItem>\r\n        ))}\r\n        </List>\r\n        <Divider />\r\n        <ListItem style={{justifyContent: minimized ? 'center' : \"initial\"}} button onClick={() => props.history.push(`${props.match.url}/settings`)}>\r\n            <Settings style={{marginRight: minimized ? 0 : 12}} />\r\n            {!minimized && <Typography>Settings</Typography>}\r\n        </ListItem>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default withRouter(Sidebar)","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\calendar.tsx",["196","197"],"import { Paper } from \"@material-ui/core\";\r\nimport { WorkhubClient } from \"@workerhive/client\";\r\nimport { useHub } from \"@workerhive/client/dist/react\";\r\nimport { Calendar, Header, MutableDialog } from \"@workerhive/react-ui\";\r\nimport React from \"react\";\r\n\r\nexport const CALENDAR_VIEW =  {\r\n        path: '/dashboard/calendar',\r\n        label: \"Calendar\",\r\n        data: {\r\n            projects: {\r\n                type: '[Project]'\r\n            },\r\n            scheduleItems: {\r\n                type: '[Schedule]',\r\n                poll: 15 * 1000\r\n            },\r\n            people: {\r\n                type: '[TeamMember]'\r\n            },\r\n            equipment: {\r\n                type: '[Equipment]'\r\n            }\r\n        },\r\n        layout: (sizes: any, rowHeight: number) => [\r\n            {\r\n                i: 'header',\r\n                x: 0,\r\n                y: 0,\r\n                w: 12,\r\n                h: 1,\r\n                component: (data: any) => <Header title={\"Calendar\"} />,\r\n            },\r\n            {\r\n                i: 'data',\r\n                x: 0,\r\n                y: 1,\r\n                w: 12,\r\n                h: sizes.height / rowHeight - 1, \r\n                component: (data: any, params: any, type: any, client?: WorkhubClient | null) => {\r\n                    const t: any = {};\r\n                    console.log(type)\r\n                    if (type[\"Schedule\"]) type[\"Schedule\"].def.forEach((_type: any) => {\r\n                        t[_type.name] = _type.type;\r\n                    })\r\n                    return ((props) => {\r\n                        const [ c, stores ] = useHub()\r\n                        const [ modalOpen, openModal ] = React.useState<boolean>(false);\r\n\r\n                        const [ userData, setData ] = React.useState<object>({});\r\n\r\n                          return <>\r\n                        <MutableDialog \r\n                            open={modalOpen} \r\n                            onSave={({item} : any) => {\r\n                                if(item.id){\r\n                                    const id = item.id;\r\n                                    client!.actions.updateSchedule(id, item).then(() => {\r\n                                        openModal(false)\r\n                                    })\r\n                                }else{\r\n\r\n                                 //  client!.realtimeSync?.getArray('Schedule', type['Schedule']).push([item])\r\n                   \r\n                                    openModal(false)\r\n\r\n                                    \r\n                                    client!.actions.addSchedule(item).then(() => {\r\n                                        openModal(false)\r\n                                    })\r\n                                }\r\n                            }}\r\n                            onClose={() => {\r\n                                openModal(false);\r\n                                setData({})\r\n                            }}\r\n                            models={client?.models?.map((x: any) => ({\r\n                                ...x,\r\n                                data: stores[x.name]\r\n                            }))}\r\n                            data={userData}\r\n                            structure={t} title={\"Schedule\"}/>\r\n                        <Calendar events={data.scheduleItems ? data.scheduleItems.map((x:any) => {\r\n                            return {\r\n                                ...x,\r\n                                start: typeof(x.start) === 'string' ? new Date(x.start) : x.start,\r\n                                end: typeof(x.end) === 'string' ? new Date(x.end) : x.end\r\n                            }\r\n                        }) : []} \r\n                        onDoubleClickEvent={(event: any) => {\r\n                            setData(event)\r\n                            openModal(true)\r\n                        }}\r\n                        onSelectSlot={(slotInfo: any) =>{\r\n                            openModal(true)\r\n                            setData(slotInfo)\r\n                        } } />\r\n                    </>\r\n                    })(data)\r\n                }\r\n            }\r\n        ]\r\n    }","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\equipment.tsx",[],"C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\project.tsx",[],"C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\contacts.tsx",[],"C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\knowledgebase.tsx",[],"C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\team.tsx",["198","199"],"import { Divider, Fab, ListItem, Typography } from \"@material-ui/core\";\r\nimport { Add, Delete, Edit } from \"@material-ui/icons\";\r\nimport { Header, MoreMenu, MutableDialog, SearchTable } from \"@workerhive/react-ui\";\r\nimport React from \"react\";\r\n\r\nexport const TEAM_VIEW = {\r\n        path: '/dashboard/team',\r\n        label: \"Team\",\r\n        data: {\r\n            team: {\r\n                type: \"[TeamMember]\"\r\n            }\r\n        },\r\n        layout: (sizes : any, rowHeight: number) => [\r\n            {\r\n                i: 'header',\r\n                x: 0,\r\n                y: 0,\r\n                w: 12,\r\n                h: 1,\r\n                component: (data: any) => (<Header title={data.label} />)\r\n            },\r\n            {\r\n                i: 'data',\r\n                x: 0,\r\n                y: 0,\r\n                w: 12,\r\n                h: (sizes.height / rowHeight) - (sizes.width < 600 ? 2 : 1),\r\n                component: (data: any, params: any, type: any, client: any) => {\r\n                    const t: any = {};\r\n                    if (type[\"TeamMember\"]) type[\"TeamMember\"].def.forEach((_type: any) => {\r\n                        t[_type.name] = _type.type;\r\n                    })\r\n                    return ((props) => {\r\n                        const [open, modalOpen] = React.useState<boolean>(false);\r\n                        const [ selected, setSelected] = React.useState<any>();\r\n                        return (\r\n                            <div style={{ flex: 1, display: 'flex', position: 'relative' }}>\r\n                                <MutableDialog \r\n                                    title={data.label} \r\n                                    data={selected}\r\n                                    structure={t}\r\n                                    onSave={({item} : any) => {\r\n                                        if(item.id){\r\n                                            const id = item.id;\r\n                                            delete item.id;\r\n                                            props.client.actions.updateTeamMember(id, item).then(() => {\r\n                                                modalOpen(false)\r\n                                            })\r\n                                        }else{\r\n                                            props.client.actions.addTeamMember(item).then(() => {\r\n                                                modalOpen(false)\r\n                                            })\r\n                                        }\r\n                                       \r\n                                    }}\r\n                                    onClose={() => modalOpen(false)}\r\n                                    open={open} />\r\n\r\n                                <SearchTable \r\n                                    renderItem={({item} : {item: any}) => [\r\n                                        <>\r\n                                           <Typography style={{flex: 1}}>{item.name || item.username}</Typography>\r\n                                           <MoreMenu menu={[\r\n                                               {icon: <Edit />, label: \"Edit\", action: () => {\r\n                                                   setSelected(item);\r\n                                                   modalOpen(true)\r\n                                               }},\r\n                                               {icon: <Delete />, label: \"Delete\", color: 'red', action: () => {\r\n                                                   props.client.actions.deleteTeamMember(item.id)\r\n                                               }}\r\n                                           ]} />\r\n                                        </>\r\n                                       \r\n                                    ]} \r\n                                    data={data.team || []} />\r\n\r\n                                <Fab onClick={() => modalOpen(true)} style={{ position: 'absolute', right: 12, bottom: 12 }} color=\"primary\">\r\n                                    <Add />\r\n                                </Fab>\r\n                            </div>\r\n                        )\r\n                    })({client})\r\n                }\r\n            }\r\n        ]\r\n    }","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\file.tsx",["200"],"import { WorkhubClient } from \"@workerhive/client\";\r\nimport { FileBrowser, Header } from \"@workerhive/react-ui\";\r\nimport React from \"react\";\r\n\r\nexport const FILE_VIEW = {\r\n        path: '/dashboard/files',\r\n        label: \"Files\",\r\n        data: {\r\n            files: {\r\n                type: '[File]'\r\n            }\r\n        },\r\n        layout: (sizes: any, rowHeight: number) => [\r\n            {\r\n                i: 'header',\r\n                x: 0,\r\n                y: 0,\r\n                w: 12, \r\n                h: 1,\r\n                component: (data: any) => (<Header title=\"Files\" />)\r\n            },\r\n            {\r\n                i: 'data',\r\n                x: 0,\r\n                y: 1,\r\n                w: 12,\r\n                h: (sizes.height / rowHeight) -2,\r\n                component: (data: any, params: any, types: any, client: any) => (\r\n                    <FileBrowser files={data.files} onFileUpload={({files}: any) => {\r\n                        client!.actions.addFile(files[0])\r\n                    }} />\r\n                )\r\n            }\r\n        ]\r\n    }","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\admin.tsx",[],"C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Dashboard\\types\\home.tsx",[],"C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Settings\\settings-map.tsx",["201","202","203","204"],"import { Button, Typography } from '@material-ui/core';\r\nimport { CRUDList } from '@workerhive/react-ui';\r\nimport { useHub } from '@workerhive/client/dist/react'\r\nimport React from 'react';\r\n\r\n\r\nexport const SettingsMap = (props: any, stores: any, storeTypes : any, converters : any, _roles: any) => {\r\n  const [ client, store, isReady, err ] = useHub()\r\n\r\n  const [ models, setModels ] = React.useState<any>([]);\r\n  const [ roles, setRoles ] = React.useState<any>([])\r\n\r\n  React.useEffect(() => {\r\n    client!.getModels().then(models => {\r\n      setModels(models.crud)\r\n    });\r\n\r\n    client!.actions.getRoles().then((roles: any) => {\r\n      setRoles(roles)\r\n    })\r\n  }, [])\r\n\r\n  return [\r\n    {\r\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Add-ons</Typography>,\r\n      body: <CRUDList title={\"Add-ons\"} data={converters} />\r\n    },\r\n    {\r\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Connections</Typography>,\r\n      body: (\r\n        <CRUDList \r\n          title={\"Connections\"} \r\n          onDelete={({item}: any) => {\r\n            if(item && item.id){\r\n              client!.actions.deleteStore(item.id)\r\n            }\r\n            \r\n          }}\r\n          onSave={({item} : any) => {\r\n            let obj = Object.assign({}, item)\r\n            if(!obj.id){\r\n              client!.actions.addStore(obj)\r\n            }else{\r\n              const id = obj.id;\r\n              delete obj.id;\r\n              console.log(\"UPDATE STORE\", id, obj)\r\n\r\n              client!.actions.updateStore(id, obj)\r\n            }\r\n          }}\r\n          type={{name: 'String', type: {type: 'Select', items: storeTypes, key: 'id'}, host: 'String', user: 'String', pass: 'Password', dbName: 'String'}} \r\n          data={store.IntegrationStore} />\r\n      )\r\n    },\r\n    {\r\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Roles</Typography>,\r\n      body: (\r\n        <CRUDList \r\n          title={\"Roles\"} \r\n          onDelete={({item}: any) => {\r\n            client!.actions.deleteRole(item.id)\r\n          }}\r\n          onSave={({item}: any) => {\r\n            let obj = Object.assign({}, item);\r\n            if(!obj.id){\r\n              client!.actions.addRole(obj)\r\n            }else{\r\n              const id = obj.id;\r\n              delete obj.id;\r\n              client!.actions.updateRole(id,obj)\r\n            }\r\n          }}\r\n          type={{\r\n            name: 'String', \r\n            permissions: {\r\n              type: 'Table', \r\n              items: models.filter((a: any) => a.directives.indexOf('configurable') > -1)\r\n            }\r\n          }} \r\n          data={store.Role} />\r\n      )\r\n    },\r\n    {\r\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Data Flow</Typography>,\r\n      body: (\r\n        <div style={{flex: 1, display: 'flex', flexDirection: 'column'}}>\r\n          <Typography color=\"secondary\">Warning: changing these settings is dangerous don't enter unless you know what you're doing</Typography>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={() => props.history.push(`/dashboard/admin`)}>Go to editor</Button>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      title: <Typography variant=\"h6\" style={{display: 'flex'}}>Data types</Typography>,\r\n      body: (\r\n        <CRUDList title={\"Types\"} type={{name: 'String', def: 'KV'}} data={models} \r\n          onEdit={({item}: any) => {\r\n            props.history.push(`${props.match.url}/type-editor/${item.name}`)\r\n          }}\r\n          onSave={({item} : any) => { \r\n            console.log(item) \r\n          }} />   \r\n      )\r\n    }\r\n  ]\r\n}","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\components\\layout\\index.tsx",["205","206","207","208","209","210","211","212","213","214","215"],"import React, { Suspense, lazy, useRef } from 'react';\r\nimport RGL, { WidthProvider } from 'react-grid-layout'\r\nimport { WorkhubClient } from '@workerhive/client'\r\nimport useResizeAware from 'react-resize-aware';\r\nimport 'react-grid-layout/css/styles.css';\r\nimport { useHub } from '@workerhive/client/dist/react';\r\nimport { isEqual } from 'lodash';\r\nconst ReactGridLayout = WidthProvider(RGL);\r\n\r\nconst Header = lazy(() => import('@workerhive/react-ui').then((r) => ({ default: r.Header })))\r\nconst SearchTable = lazy(() => import('@workerhive/react-ui').then((r) => ({ default: r.SearchTable })))\r\n\r\n\r\nexport interface LayoutItem {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n    i: string;\r\n    maxW?: number;\r\n    maxH?: number;\r\n    component: (store: any, params?: any, type?: object, client?: WorkhubClient | null) => any;\r\n}\r\n\r\nexport interface LayoutProps {\r\n    schema: {\r\n        layout: (sizes: any, rowHeight: number) => Array<LayoutItem>,\r\n        data: any,\r\n        label: string,\r\n        path: string\r\n    },\r\n    match: any;\r\n    history: any;\r\n}\r\n\r\nconst defaultProps = {\r\n    items: 20,\r\n    rowHeight: 50,\r\n    cols: 12,\r\n}\r\n\r\nexport const Layout: React.FC<LayoutProps> = (props) => {\r\n    const [resizeListener, sizes] = useResizeAware();\r\n\r\n    const [client, store, isReady, err] = useHub();\r\n\r\n    const [ schema, setSchema ] = React.useState<any>();\r\n\r\n    const [data, setData] = React.useState<any>({})\r\n    const [types, setTypes] = React.useState<any>({})\r\n\r\n    React.useEffect(() => {\r\n        if (client != null && !isEqual(props.schema, schema)) {\r\n\r\n            if (props.schema.data) {\r\n                /*\r\n                    Data fetching schema\r\n                    {\r\n                        [key]: {\r\n                            type: 'GraphType',\r\n                            query: `getGraphType(id: $id)`\r\n                        }\r\n                    }\r\n                */\r\n                let _types : any = {};\r\n                (async () => {\r\n                    for (const k in props.schema.data) {\r\n                        //Pull name from data object\r\n                        let name = props.schema.data[k].type;\r\n                        console.log(\"Get Data\", name)\r\n                        const pollLength : number = props.schema.data[k].poll || undefined;\r\n                        const liveData : boolean = props.schema.data[k].live || false;\r\n\r\n                        if(!name) continue;\r\n\r\n                        let isArray = false;\r\n                        let query = typeof(props.schema.data[k].query) === 'function' ? props.schema.data[k].query(props.match.params) : {}\r\n\r\n                        //Check to see if it's an array type\r\n                        if (name.match(/\\[(.*?)\\]/)) {\r\n                            name = name.match(/\\[(.*?)\\]/)[1]\r\n                            isArray = true;\r\n                        }\r\n\r\n                        //Fetch the full Model Description\r\n                        let model = client.models?.concat(client.uploadModels).filter((a : any) => a.name === name)[0]\r\n\r\n                        if (model) {\r\n                            //Key the model to types state\r\n                            console.log(\"TYPES\", types)\r\n                            _types[model.name] = model;\r\n                          //  setTypes(t);\r\n\r\n                            let currentValue;\r\n\r\n                            //Check for data in cache if not delegate to fetch\r\n                            if (isArray) {\r\n                                currentValue = store[model.name]\r\n                                console.log(\"Current value\", currentValue, store, model.name)\r\n                                if (currentValue && currentValue.length > 0) {\r\n                                    console.log(\"Current value\", currentValue)\r\n                                } else {\r\n                                    if(pollLength && pollLength > 0){\r\n                                        console.log(\"Registering poll length\", pollLength, model.name)\r\n                                        setInterval(async () => {\r\n                                            console.log(\"Fetch\", model.name)\r\n                                            await client!.actions[`get${model.name}s`](false);\r\n                                        }, pollLength)\r\n                                    }\r\n                                    let result = await client!.actions[`get${model.name}s`]()\r\n\r\n                                    currentValue = result //store[model.name]\r\n\r\n                                }\r\n                            } else {\r\n                                currentValue = store[model.name] ? store[model.name].filter((a: any) => {\r\n                                    let matches = true;\r\n                                    for (var k in (query || {})) {\r\n                                        if (a[k] != query[k]) {\r\n                                            matches = false;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    return matches;\r\n                                }) : []\r\n\r\n                                if (currentValue.length > 0) {\r\n                                    currentValue = currentValue[0]\r\n                                    console.log(\"CUrrent Valye\", currentValue)\r\n                                } else {\r\n                                    let result = await client!.actions[`get${model.name}`](query.id)\r\n                                    currentValue = result\r\n                                    console.log(\"had to fetch fresh data\")\r\n                                }\r\n                            }\r\n\r\n                            console.log(\"KEYING\", k, currentValue)\r\n                            let d = Object.assign({}, data)\r\n                            d[k] = currentValue;\r\n                            setData(d)\r\n\r\n\r\n                        }\r\n                    }\r\n                })()\r\n                setTypes(_types)\r\n                setSchema(props.schema)\r\n            }\r\n        }\r\n    }, [props.schema, schema, client, props.match.params, data, store, types])\r\n\r\n    function getData() : object{\r\n        let obj : any = {};\r\n\r\n        for(const k in props.schema.data){\r\n            let name = props.schema.data[k].type;\r\n            const liveData: boolean = props.schema.data[k].live || false;\r\n\r\n\r\n            if(!name) continue;\r\n            let arr = (name.match(/\\[(.*?)\\]/) != null)\r\n            if(arr) name = name.match(/\\[(.*?)\\]/)[1]\r\n\r\n            let model = client!.models?.concat(client!.uploadModels).filter((a : any) => a.name === name)[0]\r\n\r\n            let query = typeof(props.schema.data[k].query) === 'function' ? props.schema.data[k].query(props.match.params) : {}\r\n            \r\n            if(liveData) console.log(\"LIVE\", client!.realtimeSync!.getArray('calendar', model).toArray())\r\n\r\n            obj[k] = arr ? \r\n                (liveData ? client!.realtimeSync?.getArray(name, model).toArray() : (store[name] || []) )\r\n                : (liveData ? client!.realtimeSync?.getArray(name, model).toArray().filter((a : any) => {\r\n                    let match = true;\r\n                    for(var queryK in query){\r\n                        if(a[queryK] != query[queryK]){\r\n                            match = false;\r\n                        }\r\n                    }\r\n                    return match;\r\n                })[0] : (store[name] && store[name].filter((a: any) => {\r\n                    let match = true;\r\n                    for(var queryK in query){\r\n                        if(a[queryK] != query[queryK]){\r\n                            match = false;\r\n                        }\r\n                    }\r\n                    return match;\r\n                })[0] || {}))\r\n        }\r\n\r\n        return obj\r\n    }\r\n\r\n    return (\r\n        <Suspense fallback={<div>loading</div>}>\r\n            {resizeListener}\r\n            <ReactGridLayout\r\n                style={{ flex: 1 }}\r\n                {...defaultProps}\r\n                isDraggable={false}\r\n                isResizable={false}\r\n                layout={props.schema.layout(sizes, 64) as RGL.Layout[]}\r\n                onLayoutChange={(layout) => { }}\r\n                isBounded={true}>\r\n                {props.schema.layout(sizes, 64).map((x) => (\r\n                    <div key={x.i} style={{ display: 'flex', flexDirection: 'column' }}>\r\n                        {x.component instanceof Function ? x.component({\r\n                            ...getData(),\r\n                            label: props.schema.label,\r\n                            path: props.schema.path\r\n                        }, { ...props.match.params, navigate: (url: string) => props.history.push(url) }, types, client) : x.component}\r\n                    </div>\r\n                ))}\r\n            </ReactGridLayout>\r\n        </Suspense>\r\n    )\r\n}","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\components\\menu-view\\index.tsx",[],"C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\components\\layout-editor\\index.tsx",["216"],"import { Fab, Menu, MenuItem, Typography } from '@material-ui/core';\r\nimport { Add, Cancel, Edit } from '@material-ui/icons';\r\nimport React from 'react';\r\nimport { v4 } from 'uuid';\r\nimport { isEqual } from 'lodash'\r\nimport RGL, {WidthProvider} from 'react-grid-layout'\r\nimport { EditorModal } from './editor-modal';\r\nimport { DataModal } from './data-modal'\r\nimport 'react-grid-layout/css/styles.css';\r\nimport './index.css';\r\n\r\nconst ReactGridLayout = WidthProvider(RGL);\r\n\r\nexport interface LayoutEditorProps {\r\n    onLayoutChange?: Function;\r\n    layout?: any;\r\n}\r\n\r\nconst defaultProps = {\r\n    items: 20,\r\n    rowHeight: 50,\r\n    cols: 12, \r\n}\r\nexport const LayoutEditor : React.FC<LayoutEditorProps> = ({layout = [], onLayoutChange}) => {\r\n    const [ context, setContext ] = React.useState<any>({})\r\n    const [ modalOpen, openModal ] = React.useState<boolean>(false);\r\n    const [ linkModal, openLink ] = React.useState<boolean>(false);\r\n\r\n    const componentMenu = [<Edit />, <Cancel />]\r\n    const setLayouts = (layout: any) => {\r\n        if(onLayoutChange) onLayoutChange(layout)\r\n    }\r\n\r\n    const addItem = (Item: any, name: string) => {\r\n        setLayouts(layout.concat([{\r\n            i: v4(),\r\n            x: 1,\r\n            y: 1,\r\n            w: 1,\r\n            h: 1,\r\n            component: <Item />,\r\n            componentName: name\r\n        }]))\r\n    }\r\n\r\n\r\n    const handleContextMenu = (event: React.MouseEvent, item: any) => {\r\n        event.preventDefault();\r\n\r\n        setContext({x: event.clientX - 2, y: event.clientY - 4, item: item})\r\n        console.log(\"Right click menu\", item)\r\n    }\r\n\r\n    return (\r\n        <div className=\"workhub-layout-editor\">\r\n        <ReactGridLayout \r\n            style={{flex:1}}\r\n            {...defaultProps}    \r\n            layout={layout}\r\n            onLayoutChange={(_layout : any) => {\r\n                console.log(\"Layout change\")\r\n                let l = layout.map((x: any) => {\r\n                    return {\r\n                        ...x,\r\n                        ..._layout.filter((a : any) => a.i == x.i)[0]\r\n                    }\r\n                })\r\n                if(!isEqual(l, layout)){\r\n                    setLayouts(l)\r\n                }else{\r\n                    console.log(\"No change\")\r\n                }\r\n            }} \r\n            isBounded={true}>\r\n                {layout.map((x: any) => (\r\n                    <div onContextMenu={(e: React.MouseEvent) => {handleContextMenu(e, x)}} key={x.i} className=\"layout-item\" style={{display: 'flex', flexDirection: 'column'}}>\r\n                        <div className=\"component-menu\">\r\n                            {componentMenu}\r\n                        </div>\r\n                        {x.component}\r\n                    </div>\r\n                ))} \r\n        </ReactGridLayout>\r\n        <Menu\r\n            keepMounted\r\n            open={context.y != null}\r\n            onClose={() => setContext({})}\r\n            anchorReference=\"anchorPosition\"\r\n            anchorPosition={\r\n                context.y !== null && context.x !== null ? {\r\n                    top: context.y, left: context.x\r\n                } : undefined\r\n            }\r\n            >\r\n                <Typography style={{fontWeight: 'bold', paddingLeft: 8}}>{context.item && context.item.componentName}</Typography>\r\n                <MenuItem onClick={() => openLink(true)}>Link Data</MenuItem>\r\n                <MenuItem style={{color: 'red'}}>Remove Component</MenuItem>\r\n            </Menu>\r\n        <Fab style={{position: 'absolute', right: 12, bottom: 12}} color=\"primary\" onClick={() => openModal(true)}>\r\n            <Add />\r\n        </Fab>\r\n        <DataModal component={context.item} open={linkModal} onClose={(e: any) => {openLink(false)}}/>\r\n        <EditorModal open={modalOpen} onSave={(item, name) => {\r\n            addItem(item, name)    \r\n        }} onClose={() => openModal(false)}/>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\components\\layout-editor\\data-modal.tsx",["217","218"],"import { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport { useHub } from '@workerhive/client/dist/react';\r\nimport React from 'react';\r\n\r\nconst WorkUIProps = require('@workerhive/react-ui/dist/prop-spec.js')\r\n\r\nexport interface DataModalProps {\r\n    open: boolean;\r\n    onClose?(event?: any): any;\r\n    component?: {componentName: string}\r\n}\r\n\r\nexport interface DataModalInputProps {\r\n    type: {type: string, properties: any};\r\n    label?: string;\r\n}\r\n\r\nexport const DataModalInput : React.FC<DataModalInputProps> = (props) => {\r\n    const [ client, isReady, err ] = useHub()\r\n\r\n    switch(props.type.type){\r\n        case 'string':\r\n            return <TextField fullWidth label={props.label} />\r\n        case 'array':\r\n            return (\r\n                <FormControl fullWidth>\r\n                    <InputLabel>{props.label}</InputLabel>\r\n                    <Select fullWidth>\r\n                        {client && client.models!.map((x : any) => (\r\n                            <MenuItem>{x.name}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            )\r\n        case 'object':\r\n            if(props.type.properties.args != null){\r\n               return <div>Function ({Object.keys(props.type.properties.args.properties).join(', ')})</div>\r\n            }\r\n           return null;\r\n\r\n        default: \r\n            return null;\r\n    }\r\n}\r\n\r\nexport const DataModal : React.FC<DataModalProps> = (props) => {\r\n    const [ properties, setProperties ] = React.useState<any>({})\r\n\r\n    React.useEffect(() => {\r\n        if(props.component){\r\n            let prop = WorkUIProps[`${props.component?.componentName}Props`]\r\n            console.log(prop)\r\n            setProperties(prop.properties)\r\n        } \r\n    }, [props.component])\r\n\r\n\r\n    return (\r\n        <Dialog fullWidth open={props.open} onClose={props.onClose}>\r\n            <DialogTitle>Link Data</DialogTitle>\r\n            <DialogContent>\r\n                {Object.keys(properties).map((prop: any) => {\r\n                    return (\r\n                     <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\r\n                         <div style={{flex: 1}}>{prop} :</div> \r\n                         <div style={{flex: 1}}>\r\n                             <DataModalInput label={prop} type={properties[prop]} />\r\n                          </div>\r\n                     </div>\r\n                    );\r\n                })}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={props.onClose}>Cancel</Button>\r\n                <Button color=\"primary\" variant=\"contained\">Save</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\components\\layout-editor\\editor-modal.tsx",["219"],"import * as Components from '@workerhive/react-ui'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport * as React from 'react';\r\n\r\nconst WorkUIProps = require('@workerhive/react-ui/dist/prop-spec.js')\r\n\r\nconst WorkUI : any = {...Components}\r\n\r\n\r\n\r\nexport interface EditorModalProps{\r\n    open: boolean;\r\n    onClose?: (e: any) => void;\r\n    onSave?: (e: any, componentName: string) => void;\r\n}\r\n\r\nexport const EditorModal : React.FC<EditorModalProps> = (props) => {\r\n    const [ component, setComponent ] = React.useState<any>(null);\r\n    const [ componentProps, setComponentProps ] = React.useState<any>({});\r\n\r\n    const onClose = (e: any) => {\r\n        if(props.onClose) props.onClose(e);\r\n        setComponent(null)\r\n    }\r\n\r\n    const onSave = (e: any) => {\r\n        if(props.onSave) props.onSave(WorkUI[component], component)\r\n        onClose(e);\r\n    }\r\n\r\n    return (\r\n        <Dialog fullWidth open={props.open} onClose={props.onClose}>\r\n            <DialogTitle>Add component</DialogTitle>\r\n            <DialogContent style={{display: 'flex', flexDirection: 'column'}}>\r\n                <FormControl>\r\n                    <InputLabel>Component</InputLabel>\r\n                    <Select value={component} onChange={(e) => {\r\n                        setComponentProps(WorkUIProps[`${e.target.value}Props`].properties)\r\n                        \r\n                        setComponent(e.target.value)\r\n                    }}>\r\n                        {Object.keys(WorkUI).map((x : string) => (\r\n                            <MenuItem value={x}>{x}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <div>\r\n                    {Object.keys(componentProps).map((x) => {\r\n\r\n                        return (\r\n                            <div>\r\n                               {x}: {componentProps[x].type}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n                \r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onClose} >Cancel</Button>\r\n                <Button onClick={onSave} color=\"primary\" variant=\"contained\">Add</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Admin\\index.tsx",["220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242"],"import React, { Component } from 'react';\r\n\r\nimport { Editor, HiveProvider, NodePanel, useEditor, withEditor } from \"@workerhive/hive-flow\"\r\nimport '@workerhive/hive-flow/dist/index.css'\r\nimport './index.css';\r\nimport { useHub } from '@workerhive/client/dist/react';\r\n\r\nimport * as ExtStore from './nodes/ext-store';\r\nimport * as ExtAdapter from './nodes/ext-adapter';\r\nimport * as TypeDefNode from './nodes/type-def'\r\nimport { link } from 'fs';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from '@material-ui/core';\r\nimport { AdminEditor } from './editor';\r\n\r\nexport interface AdminViewProps{\r\n    stores: any;\r\n}\r\n\r\nexport const AdminView: React.FC<AdminViewProps> = (props) => {\r\n    const [ client, store, isReady, err ] = useHub()\r\n\r\n    const editor = useEditor();\r\n    const [ nodes, setNodes ] = React.useState<any>([])\r\n    const [ links, setLinks ] = React.useState<any>([])\r\n\r\n    const displayNodes = client!.models! ? client!.models!.filter((a) => a.directives.indexOf('configurable') > -1).map((x: any, ix :number) => ({\r\n                    id: `type-${ix}`,\r\n                    type: 'typeDef',\r\n                    position: {\r\n                        x: ix * 200,\r\n                        y: 200,\r\n                    },\r\n                    data: {\r\n                        status: 'typing',\r\n                        label: x.name,\r\n                        typedef: x.def,\r\n                    }\r\n                })).concat((props.stores || []).map((x: any, ix : number) => ({\r\n                    id: `store-${ix}`,\r\n                    type: 'extStore',\r\n                    position: {\r\n                        x: ix * 200,\r\n                        y: 350\r\n                    },\r\n                    data: {\r\n                        status: 'warning',\r\n                        label: x.name\r\n                    }\r\n                }))).concat(nodes) : []\r\n    const types = [TypeDefNode, ExtStore, ExtAdapter]\r\n\r\n    const [ modalOpen, openModal ] = React.useState<boolean>(false);\r\n\r\n    const [ Modal, setModal ] = React.useState<any>();\r\n    const [ selectedNode, setNode ] = React.useState<any>();\r\n\r\n    const [ filterLink, setFilterLink ] = React.useState<any>([]);\r\n\r\n    return (\r\n        <div className=\"admin-view\">\r\n\r\n            <HiveProvider store={{\r\n                nodeTypes: types,\r\n                nodes: displayNodes,\r\n                links: links.filter((a : any) => filterLink.map((x : any) => x.id).indexOf(a.id) == -1),\r\n                statusColors: {\r\n                    typing: 'green',\r\n                    new: 'yellow',\r\n                    warning: 'orange',\r\n                },\r\n                exploreNode: (id: string) => {\r\n                    let node : any = Object.assign({}, displayNodes.filter((a) => a.id == id)[0])\r\n                    const type = types.filter((a) => a.type == node.type)[0]\r\n                    node.type = type;\r\n                    setNode(node)\r\n                },\r\n                onNodeAdd: (node: any) => {\r\n                    setNodes(nodes.concat([node]))\r\n                },\r\n                onLinkAdd: (link : any) => {\r\n                    console.log(\"Addd link\", link)\r\n                   setLinks(links.concat([link])) \r\n                },\r\n                onLinkRemove: (_links : any) => {\r\n                    const link = links.filter((a : any) => {\r\n                        let ix = _links.map((x : any) => x.id).indexOf(a.id)\r\n                        return ix == -1\r\n                    })\r\n                    setFilterLink(filterLink.concat(_links))\r\n                   // setLinks(link)\r\n                }\r\n            }}>\r\n                <AdminEditor onClose={() => setNode(null)} selected={selectedNode} />\r\n            </HiveProvider>\r\n        </div>    \r\n    )\r\n}","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Admin\\editor.tsx",["243","244","245"],"import { Button, Dialog, DialogActions, DialogContent, DialogTitle } from \"@material-ui/core\"\r\nimport { useHub } from \"@workerhive/client/dist/react\";\r\nimport { Editor, NodePanel, useEditor } from \"@workerhive/hive-flow\"\r\nimport React from \"react\"\r\n\r\nexport interface EditorProps {\r\n    selected?: any;\r\n    onClose: (e : any) => void;\r\n}\r\n\r\nexport const AdminEditor: React.FC<EditorProps> = (props) => {\r\n    const editor = useEditor();\r\n    const [ client, stores ] = useHub();\r\n\r\n    //const [ Modal, setModal ] = React.useState<any>();\r\n    const [ modalOpen, openModal ] = React.useState<boolean>(false);\r\n    \r\n    const Modal = props.selected && props.selected.type && props.selected.type.modal;\r\n\r\n    return (\r\n        <>\r\n         <Dialog fullWidth open={props.selected != null} onClose={props.onClose}>\r\n                <DialogTitle>Update Node</DialogTitle>\r\n                <DialogContent style={{display: 'flex', flexDirection: 'column', flex: 1}}>\r\n                    {Modal != null && <Modal node={props.selected} editor={editor} client={client} />}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={props.onClose}>Cancel</Button>\r\n                    <Button color=\"primary\" variant=\"contained\">Save</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n                <Editor />\r\n                <NodePanel />\r\n        </>\r\n    )\r\n}","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Admin\\nodes\\type-def.tsx",["246","247"],"import React from 'react';\r\n\r\nimport { NodeWrapper, withEditor } from '@workerhive/hive-flow';\r\nimport  ReactJson from 'react-json-view'\r\n\r\nexport const type = 'typeDef'\r\n\r\nexport interface ModalProps {\r\n    node: any;\r\n}\r\n\r\nexport const modal = (props : any) => {\r\n    console.log(props)\r\n    return <div style={{flex: 1}}>\r\n        <ReactJson src={props.node.data.typedef} />\r\n    </div>\r\n}\r\n\r\n\r\nexport const node = withEditor((props : any) => {\r\n    return (\r\n    <NodeWrapper {...props}>\r\n      <div style={{padding: 8}} className=\"type-def\">\r\n        {props.id && props.data.label || \"Type Def\"}\r\n     </div>\r\n    </NodeWrapper>\r\n    )\r\n})","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Admin\\nodes\\ext-adapter.tsx",["248","249","250","251","252","253","254","255","256","257","258","259","260"],"import React from 'react';\r\n\r\nimport { Autocomplete } from '@material-ui/lab'\r\nimport { NodeWrapper, useEditor, withEditor } from '@workerhive/hive-flow';\r\nimport { FormControl, InputLabel, MenuItem, Select, TextField, Typography } from '@material-ui/core';\r\nimport { useHub } from '@workerhive/client/dist/react';\r\n\r\nexport const type = 'extAdapter'\r\n\r\nconst Modal = (props : any) => {\r\n\r\n    const client = props.client;\r\n    const editor = props.editor;\r\n\r\n    const [ selectedTable, setSelectedTable ] = React.useState<any>();\r\n    const [ tableColumns, setTableColumns ] = React.useState<any>([])\r\n\r\n    const [ storeTables, setStoreTables ] = React.useState<any>([])\r\n\r\n    const getStore = () => {\r\n        let storeLink = editor.links.filter((a : any) => a.source == props.node.id)[0]\r\n        console.log(storeLink)\r\n        if(storeLink){\r\n            let storeNode = editor.nodes.filter((a : any) => a.id == storeLink.target)[0]\r\n            console.log(storeLink)\r\n            return storeNode\r\n        }\r\n    }\r\n\r\n    const getModel = () => {\r\n        let storeLink = editor.links.filter((a : any) => a.target == props.node.id)[0]\r\n        console.log(storeLink)\r\n        if(storeLink){\r\n            let storeNode = editor.nodes.filter((a : any) => a.id == storeLink.source)[0]\r\n            console.log(storeLink)\r\n            return storeNode;\r\n        }\r\n    }\r\n\r\n    const updateModelLink = (target : string) => {\r\n        let storeLink = editor.links.filter((a : any) => a.target == props.node.id)[0]\r\n        if(storeLink){\r\n            props.editor.addLink(target, props.node.id)\r\n            props.editor.onElementsRemove([storeLink])\r\n\r\n        }\r\n    }\r\n\r\n  const renderFields = () => {\r\n    let type : any = getModel();\r\n\r\n\r\n    let returnType = type.data.typedef.map((x : any) => {\r\n        return (\r\n            <div style={{borderBottom: '1px solid green', marginBottom: 4, paddingBottom: 4, display: 'flex', alignItems: 'center'}}>\r\n                <Typography style={{flex: 1}} variant=\"subtitle1\">{x.name}</Typography>\r\n                <Select style={{flex: 1}}>\r\n                    {tableColumns.filter((a : any) => {\r\n                       if(x.type === 'String'){\r\n                        return a.datatype == 'nvarchar'\r\n                       } \r\n                       return true;\r\n                    }).map((column: any) => (\r\n                        <MenuItem value={column.name}>{column.name}</MenuItem>\r\n                    ))}\r\n                    <MenuItem>N/A</MenuItem>\r\n                </Select> \r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div style={{marginTop: 8}}>\r\n            <Typography variant=\"h6\">Adapter Map</Typography>\r\n            {returnType}\r\n        </div>\r\n    )\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    let store = getStore();\r\n    console.log(\"Fetch layout\", store.data.label)\r\n    client!.actions.getStoreLayout(store.data.label).then((data : any) => {\r\n        console.log(data);\r\n        setStoreTables(data)\r\n    })\r\n  }, [client, getStore])\r\n\r\n  return (\r\n    <div style={{flex: 1, flexDirection: 'column', display: 'flex'}}>\r\n        <FormControl>\r\n            <InputLabel>Store</InputLabel>\r\n            <Select value={getStore().id}>\r\n                {editor.nodes.filter((a : any) => a.type == 'extStore').map((x : any) => {\r\n                    return <MenuItem value={x.id}>{x.data.label}</MenuItem>\r\n                })}\r\n            </Select>\r\n        </FormControl>\r\n        <FormControl>\r\n            <InputLabel>Model</InputLabel>\r\n            <Select value={getModel().id} onChange={(e) => {\r\n                updateModelLink(e.target.value as string)\r\n            }}>\r\n                {editor.nodes.filter((a: any) => a.type == 'typeDef').map((x: any) => (\r\n                    <MenuItem value={x.id}>{x.data.label}</MenuItem>\r\n                ))}\r\n            </Select>\r\n        </FormControl>\r\n        <Autocomplete\r\n            value={selectedTable}\r\n            onChange={(event, newValue) => {\r\n                setSelectedTable(newValue);\r\n                if(newValue && newValue.name){\r\n                    client!.actions.getBucketLayout(getStore().data.label, newValue.name).then((data: any) => {\r\n                        console.log(\"BUCKET COLS\", data);\r\n                        setTableColumns(data)\r\n                    })\r\n                }\r\n            }}\r\n            options={storeTables}\r\n            getOptionLabel={(option : any) => option.name}\r\n            renderInput={(params) => <TextField {...params} margin=\"dense\" label=\"Store Bucket\" />}\r\n             />\r\n        {renderFields()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const modal = Modal;\r\n\r\nexport const node = withEditor((props : any) => {\r\n    return (\r\n    <NodeWrapper {...props}>\r\n      <div style={{padding: 8}} className=\"ext-adapter\">\r\n        {props.id && props.data.label || \"External Adapter\"}\r\n     </div>\r\n    </NodeWrapper>\r\n    )\r\n})","C:\\Users\\Grog\\source\\hub\\packages\\web-ui\\src\\views\\Admin\\nodes\\ext-store.tsx",["261","262","263"],"import React from 'react';\r\n\r\nimport { NodeWrapper, withEditor } from '@workerhive/hive-flow';\r\n\r\nexport const type = 'extStore'\r\n\r\nexport const modal = (props : any) => {\r\n\r\n  return (\r\n    <div style={{flex: 1}}>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const node = (props : any) => {\r\n    return (\r\n    <NodeWrapper {...props}>\r\n      <div style={{padding: 8}} className=\"ext-store\">\r\n        {props.id && props.data.label || \"External Store\"}\r\n     </div>\r\n    </NodeWrapper>\r\n    )\r\n}",{"ruleId":"264","replacedBy":"265"},{"ruleId":"266","replacedBy":"267"},{"ruleId":"268","severity":1,"message":"269","line":4,"column":10,"nodeType":"270","messageId":"271","endLine":4,"endColumn":23},{"ruleId":"268","severity":1,"message":"272","line":24,"column":19,"nodeType":"270","messageId":"271","endLine":24,"endColumn":28},{"ruleId":"273","severity":1,"message":"274","line":24,"column":138,"nodeType":"275","messageId":"276","endLine":24,"endColumn":140},{"ruleId":"268","severity":1,"message":"277","line":2,"column":10,"nodeType":"270","messageId":"271","endLine":2,"endColumn":33},{"ruleId":"268","severity":1,"message":"278","line":3,"column":8,"nodeType":"270","messageId":"271","endLine":3,"endColumn":19},{"ruleId":"268","severity":1,"message":"279","line":9,"column":10,"nodeType":"270","messageId":"271","endLine":9,"endColumn":19},{"ruleId":"268","severity":1,"message":"280","line":32,"column":18,"nodeType":"270","messageId":"271","endLine":32,"endColumn":23},{"ruleId":"268","severity":1,"message":"281","line":32,"column":34,"nodeType":"270","messageId":"271","endLine":32,"endColumn":37},{"ruleId":"268","severity":1,"message":"282","line":1,"column":17,"nodeType":"270","messageId":"271","endLine":1,"endColumn":26},{"ruleId":"268","severity":1,"message":"283","line":6,"column":9,"nodeType":"270","messageId":"271","endLine":6,"endColumn":16},{"ruleId":"268","severity":1,"message":"284","line":1,"column":17,"nodeType":"270","messageId":"271","endLine":1,"endColumn":19},{"ruleId":"268","severity":1,"message":"285","line":1,"column":21,"nodeType":"270","messageId":"271","endLine":1,"endColumn":33},{"ruleId":"268","severity":1,"message":"286","line":2,"column":10,"nodeType":"270","messageId":"271","endLine":2,"endColumn":18},{"ruleId":"268","severity":1,"message":"287","line":2,"column":20,"nodeType":"270","messageId":"271","endLine":2,"endColumn":34},{"ruleId":"268","severity":1,"message":"288","line":2,"column":36,"nodeType":"270","messageId":"271","endLine":2,"endColumn":47},{"ruleId":"268","severity":1,"message":"289","line":2,"column":49,"nodeType":"270","messageId":"271","endLine":2,"endColumn":55},{"ruleId":"268","severity":1,"message":"290","line":2,"column":57,"nodeType":"270","messageId":"271","endLine":2,"endColumn":70},{"ruleId":"268","severity":1,"message":"291","line":2,"column":72,"nodeType":"270","messageId":"271","endLine":2,"endColumn":86},{"ruleId":"268","severity":1,"message":"292","line":2,"column":88,"nodeType":"270","messageId":"271","endLine":2,"endColumn":99},{"ruleId":"268","severity":1,"message":"293","line":5,"column":10,"nodeType":"270","messageId":"271","endLine":5,"endColumn":15},{"ruleId":"268","severity":1,"message":"294","line":5,"column":17,"nodeType":"270","messageId":"271","endLine":5,"endColumn":20},{"ruleId":"268","severity":1,"message":"295","line":6,"column":10,"nodeType":"270","messageId":"271","endLine":6,"endColumn":13},{"ruleId":"296","severity":1,"message":"297","line":30,"column":1,"nodeType":"298","endLine":40,"endColumn":2},{"ruleId":"268","severity":1,"message":"299","line":1,"column":10,"nodeType":"270","messageId":"271","endLine":1,"endColumn":20},{"ruleId":"268","severity":1,"message":"300","line":5,"column":15,"nodeType":"270","messageId":"271","endLine":5,"endColumn":24},{"ruleId":"268","severity":1,"message":"281","line":16,"column":30,"nodeType":"270","messageId":"271","endLine":16,"endColumn":33},{"ruleId":"301","severity":1,"message":"302","line":27,"column":8,"nodeType":"303","endLine":27,"endColumn":10,"suggestions":"304"},{"ruleId":"268","severity":1,"message":"305","line":13,"column":23,"nodeType":"270","messageId":"271","endLine":13,"endColumn":36},{"ruleId":"268","severity":1,"message":"280","line":16,"column":19,"nodeType":"270","messageId":"271","endLine":16,"endColumn":24},{"ruleId":"268","severity":1,"message":"306","line":16,"column":26,"nodeType":"270","messageId":"271","endLine":16,"endColumn":33},{"ruleId":"301","severity":1,"message":"307","line":39,"column":6,"nodeType":"303","endLine":39,"endColumn":8,"suggestions":"308"},{"ruleId":"268","severity":1,"message":"281","line":17,"column":21,"nodeType":"270","messageId":"271","endLine":17,"endColumn":24},{"ruleId":"268","severity":1,"message":"309","line":5,"column":10,"nodeType":"270","messageId":"271","endLine":5,"endColumn":18},{"ruleId":"268","severity":1,"message":"310","line":5,"column":35,"nodeType":"270","messageId":"271","endLine":5,"endColumn":41},{"ruleId":"268","severity":1,"message":"306","line":17,"column":18,"nodeType":"270","messageId":"271","endLine":17,"endColumn":25},{"ruleId":"268","severity":1,"message":"281","line":17,"column":27,"nodeType":"270","messageId":"271","endLine":17,"endColumn":30},{"ruleId":"301","severity":1,"message":"311","line":39,"column":8,"nodeType":"303","endLine":39,"endColumn":10,"suggestions":"312"},{"ruleId":"273","severity":1,"message":"274","line":102,"column":108,"nodeType":"275","messageId":"276","endLine":102,"endColumn":110},{"ruleId":"268","severity":1,"message":"293","line":1,"column":10,"nodeType":"270","messageId":"271","endLine":1,"endColumn":15},{"ruleId":"268","severity":1,"message":"313","line":47,"column":33,"nodeType":"270","messageId":"271","endLine":47,"endColumn":34},{"ruleId":"268","severity":1,"message":"314","line":1,"column":10,"nodeType":"270","messageId":"271","endLine":1,"endColumn":17},{"ruleId":"268","severity":1,"message":"315","line":1,"column":24,"nodeType":"270","messageId":"271","endLine":1,"endColumn":32},{"ruleId":"268","severity":1,"message":"269","line":1,"column":10,"nodeType":"270","messageId":"271","endLine":1,"endColumn":23},{"ruleId":"268","severity":1,"message":"306","line":8,"column":26,"nodeType":"270","messageId":"271","endLine":8,"endColumn":33},{"ruleId":"268","severity":1,"message":"281","line":8,"column":35,"nodeType":"270","messageId":"271","endLine":8,"endColumn":38},{"ruleId":"268","severity":1,"message":"316","line":11,"column":11,"nodeType":"270","messageId":"271","endLine":11,"endColumn":16},{"ruleId":"301","severity":1,"message":"307","line":21,"column":6,"nodeType":"303","endLine":21,"endColumn":8,"suggestions":"317"},{"ruleId":"268","severity":1,"message":"318","line":1,"column":33,"nodeType":"270","messageId":"271","endLine":1,"endColumn":39},{"ruleId":"268","severity":1,"message":"319","line":10,"column":7,"nodeType":"270","messageId":"271","endLine":10,"endColumn":13},{"ruleId":"268","severity":1,"message":"320","line":11,"column":7,"nodeType":"270","messageId":"271","endLine":11,"endColumn":18},{"ruleId":"268","severity":1,"message":"306","line":45,"column":27,"nodeType":"270","messageId":"271","endLine":45,"endColumn":34},{"ruleId":"268","severity":1,"message":"281","line":45,"column":36,"nodeType":"270","messageId":"271","endLine":45,"endColumn":39},{"ruleId":"268","severity":1,"message":"321","line":72,"column":31,"nodeType":"270","messageId":"271","endLine":72,"endColumn":49},{"ruleId":"273","severity":1,"message":"322","line":119,"column":50,"nodeType":"275","messageId":"276","endLine":119,"endColumn":52},{"ruleId":"273","severity":1,"message":"322","line":175,"column":38,"nodeType":"275","messageId":"276","endLine":175,"endColumn":40},{"ruleId":"323","severity":1,"message":"324","line":180,"column":38,"nodeType":"325","messageId":"326","endLine":180,"endColumn":40},{"ruleId":"273","severity":1,"message":"322","line":183,"column":38,"nodeType":"275","messageId":"276","endLine":183,"endColumn":40},{"ruleId":"323","severity":1,"message":"324","line":188,"column":23,"nodeType":"325","messageId":"326","endLine":188,"endColumn":25},{"ruleId":"273","severity":1,"message":"274","line":65,"column":60,"nodeType":"275","messageId":"276","endLine":65,"endColumn":62},{"ruleId":"268","severity":1,"message":"306","line":19,"column":21,"nodeType":"270","messageId":"271","endLine":19,"endColumn":28},{"ruleId":"268","severity":1,"message":"281","line":19,"column":30,"nodeType":"270","messageId":"271","endLine":19,"endColumn":33},{"ruleId":"268","severity":1,"message":"327","line":2,"column":112,"nodeType":"270","messageId":"271","endLine":2,"endColumn":121},{"ruleId":"268","severity":1,"message":"282","line":1,"column":17,"nodeType":"270","messageId":"271","endLine":1,"endColumn":26},{"ruleId":"268","severity":1,"message":"328","line":3,"column":10,"nodeType":"270","messageId":"271","endLine":3,"endColumn":16},{"ruleId":"268","severity":1,"message":"329","line":3,"column":32,"nodeType":"270","messageId":"271","endLine":3,"endColumn":41},{"ruleId":"268","severity":1,"message":"330","line":3,"column":54,"nodeType":"270","messageId":"271","endLine":3,"endColumn":64},{"ruleId":"268","severity":1,"message":"331","line":11,"column":10,"nodeType":"270","messageId":"271","endLine":11,"endColumn":14},{"ruleId":"268","severity":1,"message":"332","line":12,"column":10,"nodeType":"270","messageId":"271","endLine":12,"endColumn":16},{"ruleId":"268","severity":1,"message":"333","line":12,"column":18,"nodeType":"270","messageId":"271","endLine":12,"endColumn":24},{"ruleId":"268","severity":1,"message":"334","line":12,"column":26,"nodeType":"270","messageId":"271","endLine":12,"endColumn":39},{"ruleId":"268","severity":1,"message":"335","line":12,"column":41,"nodeType":"270","messageId":"271","endLine":12,"endColumn":54},{"ruleId":"268","severity":1,"message":"336","line":12,"column":56,"nodeType":"270","messageId":"271","endLine":12,"endColumn":67},{"ruleId":"268","severity":1,"message":"280","line":20,"column":21,"nodeType":"270","messageId":"271","endLine":20,"endColumn":26},{"ruleId":"268","severity":1,"message":"306","line":20,"column":28,"nodeType":"270","messageId":"271","endLine":20,"endColumn":35},{"ruleId":"268","severity":1,"message":"281","line":20,"column":37,"nodeType":"270","messageId":"271","endLine":20,"endColumn":40},{"ruleId":"268","severity":1,"message":"337","line":22,"column":11,"nodeType":"270","messageId":"271","endLine":22,"endColumn":17},{"ruleId":"268","severity":1,"message":"338","line":52,"column":13,"nodeType":"270","messageId":"271","endLine":52,"endColumn":22},{"ruleId":"268","severity":1,"message":"339","line":52,"column":24,"nodeType":"270","messageId":"271","endLine":52,"endColumn":33},{"ruleId":"268","severity":1,"message":"340","line":54,"column":13,"nodeType":"270","messageId":"271","endLine":54,"endColumn":18},{"ruleId":"268","severity":1,"message":"341","line":54,"column":20,"nodeType":"270","messageId":"271","endLine":54,"endColumn":28},{"ruleId":"273","severity":1,"message":"274","line":65,"column":98,"nodeType":"275","messageId":"276","endLine":65,"endColumn":100},{"ruleId":"273","severity":1,"message":"274","line":72,"column":88,"nodeType":"275","messageId":"276","endLine":72,"endColumn":90},{"ruleId":"273","severity":1,"message":"274","line":73,"column":61,"nodeType":"275","messageId":"276","endLine":73,"endColumn":63},{"ruleId":"268","severity":1,"message":"342","line":85,"column":27,"nodeType":"270","messageId":"271","endLine":85,"endColumn":31},{"ruleId":"273","severity":1,"message":"274","line":87,"column":35,"nodeType":"275","messageId":"276","endLine":87,"endColumn":37},{"ruleId":"268","severity":1,"message":"343","line":13,"column":21,"nodeType":"270","messageId":"271","endLine":13,"endColumn":27},{"ruleId":"268","severity":1,"message":"338","line":16,"column":13,"nodeType":"270","messageId":"271","endLine":16,"endColumn":22},{"ruleId":"268","severity":1,"message":"339","line":16,"column":24,"nodeType":"270","messageId":"271","endLine":16,"endColumn":33},{"ruleId":"323","severity":1,"message":"324","line":24,"column":19,"nodeType":"325","messageId":"326","endLine":24,"endColumn":21},{"ruleId":"323","severity":1,"message":"324","line":24,"column":39,"nodeType":"325","messageId":"326","endLine":24,"endColumn":41},{"ruleId":"268","severity":1,"message":"344","line":4,"column":23,"nodeType":"270","messageId":"271","endLine":4,"endColumn":32},{"ruleId":"268","severity":1,"message":"345","line":6,"column":10,"nodeType":"270","messageId":"271","endLine":6,"endColumn":16},{"ruleId":"301","severity":1,"message":"346","line":20,"column":11,"nodeType":"347","endLine":28,"endColumn":6,"suggestions":"348"},{"ruleId":"273","severity":1,"message":"274","line":21,"column":67,"nodeType":"275","messageId":"276","endLine":21,"endColumn":69},{"ruleId":"273","severity":1,"message":"274","line":24,"column":67,"nodeType":"275","messageId":"276","endLine":24,"endColumn":69},{"ruleId":"273","severity":1,"message":"274","line":31,"column":67,"nodeType":"275","messageId":"276","endLine":31,"endColumn":69},{"ruleId":"273","severity":1,"message":"274","line":34,"column":67,"nodeType":"275","messageId":"276","endLine":34,"endColumn":69},{"ruleId":"273","severity":1,"message":"274","line":41,"column":67,"nodeType":"275","messageId":"276","endLine":41,"endColumn":69},{"ruleId":"273","severity":1,"message":"274","line":60,"column":43,"nodeType":"275","messageId":"276","endLine":60,"endColumn":45},{"ruleId":"273","severity":1,"message":"274","line":93,"column":58,"nodeType":"275","messageId":"276","endLine":93,"endColumn":60},{"ruleId":"273","severity":1,"message":"274","line":103,"column":57,"nodeType":"275","messageId":"276","endLine":103,"endColumn":59},{"ruleId":"323","severity":1,"message":"324","line":134,"column":19,"nodeType":"325","messageId":"326","endLine":134,"endColumn":21},{"ruleId":"323","severity":1,"message":"324","line":134,"column":39,"nodeType":"325","messageId":"326","endLine":134,"endColumn":41},{"ruleId":"268","severity":1,"message":"330","line":3,"column":23,"nodeType":"270","messageId":"271","endLine":3,"endColumn":33},{"ruleId":"323","severity":1,"message":"324","line":19,"column":19,"nodeType":"325","messageId":"326","endLine":19,"endColumn":21},{"ruleId":"323","severity":1,"message":"324","line":19,"column":39,"nodeType":"325","messageId":"326","endLine":19,"endColumn":41},"no-native-reassign",["349"],"no-negated-in-lhs",["350"],"@typescript-eslint/no-unused-vars","'WorkhubClient' is defined but never used.","Identifier","unusedVar","'setHubUrl' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'MuiPickersUtilsProvider' is defined but never used.","'MomentUtils' is defined but never used.","'AdminView' is defined but never used.","'store' is assigned a value but never used.","'err' is assigned a value but never used.","'Component' is defined but never used.","'Hexagon' is assigned a value but never used.","'FC' is defined but never used.","'ReactElement' is defined but never used.","'Calendar' is defined but never used.","'DocumentEditor' is defined but never used.","'FileBrowser' is defined but never used.","'Header' is defined but never used.","'MutableDialog' is defined but never used.","'PermissionForm' is defined but never used.","'SearchTable' is defined but never used.","'Paper' is defined but never used.","'Fab' is defined but never used.","'Add' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'IconButton' is defined but never used.","'ArrowBack' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'client', 'isReady', and 'props.match.params.type'. Either include them or remove the dependency array.","ArrayExpression",["351"],"'setConverters' is assigned a value but never used.","'isReady' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'client'. Either include it or remove the dependency array.",["352"],"'identity' is defined but never used.","'pickBy' is defined but never used.","React Hook React.useEffect has missing dependencies: 'hub' and 'pageName'. Either include them or remove the dependency array.",["353"],"'c' is assigned a value but never used.","'Divider' is defined but never used.","'ListItem' is defined but never used.","'roles' is assigned a value but never used.",["354"],"'useRef' is defined but never used.","'Header' is assigned a value but never used.","'SearchTable' is assigned a value but never used.","'liveData' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'TextField' is defined but never used.","'Editor' is defined but never used.","'NodePanel' is defined but never used.","'withEditor' is defined but never used.","'link' is defined but never used.","'Button' is defined but never used.","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogTitle' is defined but never used.","'editor' is assigned a value but never used.","'modalOpen' is assigned a value but never used.","'openModal' is assigned a value but never used.","'Modal' is assigned a value but never used.","'setModal' is assigned a value but never used.","'link' is assigned a value but never used.","'stores' is assigned a value but never used.","'useEditor' is defined but never used.","'useHub' is defined but never used.","The 'getStore' function makes the dependencies of useEffect Hook (at line 86) change on every render. To fix this, wrap the definition of 'getStore' in its own useCallback() Hook.","VariableDeclarator",["355"],"no-global-assign","no-unsafe-negation",{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"358","fix":"362"},{"desc":"363","fix":"364"},"Update the dependencies array to be: [client, isReady, props.match.params.type]",{"range":"365","text":"366"},"Update the dependencies array to be: [client]",{"range":"367","text":"368"},"Update the dependencies array to be: [hub, pageName]",{"range":"369","text":"370"},{"range":"371","text":"368"},"Wrap the definition of 'getStore' in its own useCallback() Hook.",{"range":"372","text":"373"},[927,929],"[client, isReady, props.match.params.type]",[992,994],"[client]",[1377,1379],"[hub, pageName]",[673,675],[697,1023],"useCallback(() => {\r\n        let storeLink = editor.links.filter((a : any) => a.source == props.node.id)[0]\r\n        console.log(storeLink)\r\n        if(storeLink){\r\n            let storeNode = editor.nodes.filter((a : any) => a.id == storeLink.target)[0]\r\n            console.log(storeLink)\r\n            return storeNode\r\n        }\r\n    })"]